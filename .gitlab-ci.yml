# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - scan
  - build
  - test
  - linting
  - lint
  - publish
  - pages
  - release
  - python-lint

clean shell runner:
  stage: .pre
  tags:
    - k8srunner
  script:
    # Gitlab CI badges creation
    - rm -rf build/*

unit tests:
  stage: test
  tags:
    - k8srunner
  script:
    - echo $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - python3 -m pip install --extra-index-url https://artefact.skao.int/repository/pypi-all/simple -U $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - make test
    - scripts/validate-metadata.sh
  artifacts:
    paths:
      - ./build

linting:
  stage: linting
  tags:
    - k8srunner
  script:
    - echo $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - python3 -m pip install --extra-index-url https://artefact.skao.int/repository/pypi-all/simple -U $(ls -d ./dist/*.whl | grep $CI_COMMIT_SHORT_SHA)
    - make lint
  artifacts:
    paths:
      - ./build

pages:
  stage: pages
  tags:
    - k8srunner
  script:
    - mkdir .public
    - cp -R build .public
    - mv .public public
  artifacts:
    paths:
      - public
  only:
  - master

# Details: https://gitlab.com/ska-telescope/templates-repository#how-to-use
include:
    # Python
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'
  # OCI Images
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'
  # .post step finalisers eg: badges
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'
